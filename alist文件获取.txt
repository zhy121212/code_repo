今日学习
使用python利用api接口 token获取文件信息 代码
import requests
import json


# 获取文件夹详情（检查是文件夹还是文件）
def get_file_details(base_url, token, folder_path=""):
    """
    获取指定路径的文件或文件夹的详细信息（是否为文件夹）
    :param base_url: Alist API 的基础 URL
    :param token: 用户认证 token
    :param folder_path: 当前文件夹路径
    :return: 文件/文件夹详细信息
    """
    url = f"{base_url}/api/fs/get"

    # 请求的 payload 数据
    payload = json.dumps({
        "path": folder_path,  # 当前文件夹路径
        "password": "",  # 如果需要密码保护，填写密码
        "page": 1,  # 当前页码
        "per_page": 0,  # 每页数量，0 表示获取所有
        "refresh": False  # 是否刷新数据
    })

    # 请求头
    headers = {
        'Authorization': token,  # 使用获取到的 token
        'Content-Type': 'application/json'
    }

    # 发起 POST 请求
    response = requests.post(url, headers=headers, data=payload)

    # 返回的响应
    if response.status_code == 200:
        return response.json()  # 返回 JSON 格式的响应
    else:
        print(f"Error fetching {folder_path}: {response.status_code}")
        return {}


# 获取文件夹中的文件列表（通过 api/fs/list）
def get_folder_files(base_url, token, folder_path=""):
    """
    获取文件夹内部的文件列表
    :param base_url: Alist API 的基础 URL
    :param token: 用户认证 token
    :param folder_path: 当前文件夹路径
    :return: 返回文件夹中的文件列表
    """
    url = f"{base_url}/api/fs/list"

    # 请求的 payload 数据
    payload = json.dumps({
        "path": folder_path,  # 当前文件夹路径
        "password": "",  # 如果需要密码保护，填写密码
        "page": 1,  # 当前页码
        "per_page": 0,  # 每页数量，0 表示获取所有
        "refresh": False  # 是否刷新数据
    })

    # 请求头
    headers = {
        'Authorization': token,  # 使用获取到的 token
        'Content-Type': 'application/json'
    }

    # 发起 POST 请求
    response = requests.post(url, headers=headers, data=payload)

    # 返回的响应
    if response.status_code == 200:
        return response.json()  # 返回 JSON 格式的响应
    else:
        print(f"Error fetching files in {folder_path}: {response.status_code}")
        return {}


# 递归抓取文件夹内容
def get_all_files(base_url, token, folder_path=""):
    """
    递归抓取文件夹中的所有文件和子文件夹
    :param base_url: Alist API 的基础 URL
    :param token: 用户认证 token
    :param folder_path: 当前文件夹的路径
    :return: None
    """
    # 获取当前目录的文件夹信息
    response = get_file_details(base_url, token, folder_path)

    # 如果返回的响应没有文件夹或文件数据
    if 'data' not in response:
        print(f"Error: Missing 'data' in response from {folder_path}")
        return []

    file_info = response['data']

    # 判断是否为文件夹
    if file_info.get('is_dir', False):
        print(f"文件夹: {folder_path}/{file_info['name']}")

        # 获取该文件夹内部的文件列表
        folder_files_response = get_folder_files(base_url, token, folder_path)

        # 如果没有返回文件内容
        if 'data' not in folder_files_response:
            print(f"Error: 'data' not found in files list for {folder_path}")
            return []

        files = folder_files_response['data']["content"]

        for file in files:
            file_name = file['name']
            is_dir = file['is_dir']
            raw_url = file.get('raw_url') if not is_dir else None  # 使用 .get() 防止 KeyError
            modified_time = file['modified']

            # 打印文件或文件夹信息
            print(f"路径: {folder_path}/{file_name}")
            print(f"文件名: {file_name}")
            print(f"是否文件夹: {'是' if is_dir else '否'}")
            if not is_dir and raw_url:
                print(f"下载链接: {raw_url}")
            print(f"修改时间: {modified_time}")
            print("-" * 40)

            # 如果是子文件夹，递归调用
            if is_dir:
                get_all_files(base_url, token, f"{folder_path}/{file_name}")  # 递归进入子文件夹
    else:
        print(f"{folder_path} 不是一个文件夹，跳过")


# 主函数，启动抓取文件结构
def main():
    # 填写 Alist API 的基础 URL 和 token
    base_url = "http://127.0.0.1:5244"  # Alist 的 API 基础 URL
    token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwicHdkX3RzIjoxNzMwNjIwODkzLCJleHAiOjE3MzE4MzIxNzYsIm5iZiI6MTczMTY1OTM3NiwiaWF0IjoxNzMxNjU5Mzc2fQ.sj1DV2wt0IQ64lRX6XZlMLyoiQdpeBG93zVnn_70wZk"  # 你的 API token

    root_folder = "/阿里云盘Open/来自分享/初级"  # 根目录或者指定目录，根目录可以为空

    # 获取根目录及子目录的文件结构
    get_all_files(base_url, token, root_folder)


if __name__ == "__main__":
    main()
